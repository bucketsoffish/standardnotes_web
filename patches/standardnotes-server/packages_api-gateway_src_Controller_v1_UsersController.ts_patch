diff --git a/node_modules/standardnotes-server/packages/api-gateway/src/Controller/v1/UsersController.ts b/node_modules/standardnotes-server/packages/api-gateway/src/Controller/v1/UsersController.ts
index 908af27..77ea9c7 100644
--- a/node_modules/standardnotes-server/packages/api-gateway/src/Controller/v1/UsersController.ts
+++ b/node_modules/standardnotes-server/packages/api-gateway/src/Controller/v1/UsersController.ts
@@ -15,6 +15,8 @@ import { Logger } from 'winston'
 import TYPES from '../../Bootstrap/Types'
 import { HttpServiceInterface } from '../../Service/Http/HttpServiceInterface'
 import { TokenAuthenticationMethod } from '../TokenAuthenticationMethod'
+import { param } from "express-validator";
+import { Validators } from '../Validators'
 
 @controller('/v1/users')
 export class UsersController extends BaseHttpController {
@@ -35,12 +37,12 @@ export class UsersController extends BaseHttpController {
     await this.httpService.callPaymentsServer(request, response, 'api/pro_users/send-activation-code', request.body)
   }
 
-  @httpPatch('/:userId', TYPES.AuthMiddleware)
+  @httpPatch('/:userId', TYPES.AuthMiddleware, param("userId").custom(uuid => { return Validators.isUUID(uuid); }), TYPES.RequestValidator)
   async updateUser(request: Request, response: Response): Promise<void> {
     await this.httpService.callAuthServer(request, response, `users/${request.params.userId}`, request.body)
   }
 
-  @httpPut('/:userUuid/password', TYPES.AuthMiddleware)
+  @httpPut('/:userUuid/password', TYPES.AuthMiddleware, param("userUuid").custom(uuid => { return Validators.isUUID(uuid); }), TYPES.RequestValidator)
   async changePassword(request: Request, response: Response): Promise<void> {
     this.logger.debug(
       '[DEPRECATED] use endpoint /v1/users/:userUuid/attributes/credentials instead of /v1/users/:userUuid/password',
@@ -54,7 +56,7 @@ export class UsersController extends BaseHttpController {
     )
   }
 
-  @httpPut('/:userUuid/attributes/credentials', TYPES.AuthMiddleware)
+  @httpPut('/:userUuid/attributes/credentials', TYPES.AuthMiddleware, param("userUuid").custom(uuid => { return Validators.isUUID(uuid); }), TYPES.RequestValidator)
   async changeCredentials(request: Request, response: Response): Promise<void> {
     await this.httpService.callAuthServer(
       request,
@@ -64,17 +66,17 @@ export class UsersController extends BaseHttpController {
     )
   }
 
-  @httpGet('/:userId/params', TYPES.AuthMiddleware)
+  @httpGet('/:userId/params', TYPES.AuthMiddleware, param("userId").custom(uuid => { return Validators.isUUID(uuid); }), TYPES.RequestValidator)
   async getKeyParams(request: Request, response: Response): Promise<void> {
     await this.httpService.callAuthServer(request, response, 'auth/params')
   }
 
-  @all('/:userId/mfa', TYPES.AuthMiddleware)
+  @all('/:userId/mfa', TYPES.AuthMiddleware, param("userId").custom(uuid => { return Validators.isUUID(uuid); }), TYPES.RequestValidator)
   async blockMFA(): Promise<results.StatusCodeResult> {
     return this.statusCode(401)
   }
 
-  @httpPost('/:userUuid/integrations/listed', TYPES.AuthMiddleware)
+  @httpPost('/:userUuid/integrations/listed', TYPES.AuthMiddleware, param("userUuid").custom(uuid => { return Validators.isUUID(uuid); }), TYPES.RequestValidator)
   async createListedAccount(request: Request, response: Response): Promise<void> {
     await this.httpService.callAuthServer(request, response, 'listed', request.body)
   }
@@ -84,17 +86,18 @@ export class UsersController extends BaseHttpController {
     await this.httpService.callAuthServer(request, response, 'auth', request.body)
   }
 
-  @httpGet('/:userUuid/settings', TYPES.AuthMiddleware)
+  @httpGet('/:userUuid/settings', TYPES.AuthMiddleware, param("userUuid").custom(uuid => { return Validators.isUUID(uuid); }), TYPES.RequestValidator)
   async listSettings(request: Request, response: Response): Promise<void> {
     await this.httpService.callAuthServer(request, response, `users/${request.params.userUuid}/settings`)
   }
 
-  @httpPut('/:userUuid/settings', TYPES.AuthMiddleware)
+  @httpPut('/:userUuid/settings', TYPES.AuthMiddleware, param("userUuid").custom(uuid => { return Validators.isUUID(uuid); }), TYPES.RequestValidator)
   async putSetting(request: Request, response: Response): Promise<void> {
     await this.httpService.callAuthServer(request, response, `users/${request.params.userUuid}/settings`, request.body)
   }
 
-  @httpGet('/:userUuid/settings/:settingName', TYPES.AuthMiddleware)
+  @httpGet('/:userUuid/settings/:settingName', TYPES.AuthMiddleware, param("userUuid").custom(uuid => { return Validators.isUUID(uuid); }), 
+    param("settingName").custom(str => { return Validators.isAlphaNumericWithUnderscore(str); }), TYPES.RequestValidator)
   async getSetting(request: Request, response: Response): Promise<void> {
     await this.httpService.callAuthServer(
       request,
@@ -103,7 +106,8 @@ export class UsersController extends BaseHttpController {
     )
   }
 
-  @httpDelete('/:userUuid/settings/:settingName', TYPES.AuthMiddleware)
+  @httpDelete('/:userUuid/settings/:settingName', TYPES.AuthMiddleware, param("userUuid").custom(uuid => { return Validators.isUUID(uuid); }), 
+    param("settingName").custom(str => { return Validators.isAlphaNumericWithUnderscore(str); }), TYPES.RequestValidator)
   async deleteSetting(request: Request, response: Response): Promise<void> {
     await this.httpService.callAuthServer(
       request,
@@ -113,7 +117,8 @@ export class UsersController extends BaseHttpController {
     )
   }
 
-  @httpGet('/:userUuid/subscription-settings/:subscriptionSettingName', TYPES.AuthMiddleware)
+  @httpGet('/:userUuid/subscription-settings/:subscriptionSettingName', TYPES.AuthMiddleware, param("userUuid").custom(uuid => { return Validators.isUUID(uuid); }), 
+    param("subscriptionSettingName").custom(str => { return Validators.isAlphaNumericWithUnderscore(str); }), TYPES.RequestValidator)
   async getSubscriptionSetting(request: Request, response: Response): Promise<void> {
     await this.httpService.callAuthServer(
       request,
@@ -122,12 +127,12 @@ export class UsersController extends BaseHttpController {
     )
   }
 
-  @httpGet('/:userUuid/features', TYPES.AuthMiddleware)
+  @httpGet('/:userUuid/features', TYPES.AuthMiddleware, param("userUuid").custom(uuid => { return Validators.isUUID(uuid); }), TYPES.RequestValidator)
   async getFeatures(request: Request, response: Response): Promise<void> {
     await this.httpService.callAuthServer(request, response, `users/${request.params.userUuid}/features`)
   }
 
-  @httpGet('/:userUuid/subscription', TYPES.AuthMiddleware)
+  @httpGet('/:userUuid/subscription', TYPES.AuthMiddleware, param("userUuid").custom(uuid => { return Validators.isUUID(uuid); }), TYPES.RequestValidator)
   async getSubscription(request: Request, response: Response): Promise<void> {
     await this.httpService.callAuthServer(request, response, `users/${request.params.userUuid}/subscription`)
   }
@@ -143,12 +148,12 @@ export class UsersController extends BaseHttpController {
     await this.httpService.callAuthServer(request, response, `users/${response.locals.userUuid}/subscription`)
   }
 
-  @httpDelete('/:userUuid', TYPES.AuthMiddleware)
+  @httpDelete('/:userUuid', TYPES.AuthMiddleware, param("userUuid").custom(uuid => { return Validators.isUUID(uuid); }), TYPES.RequestValidator)
   async deleteUser(request: Request, response: Response): Promise<void> {
     await this.httpService.callPaymentsServer(request, response, 'api/account', request.body)
   }
 
-  @httpPost('/:userUuid/requests', TYPES.AuthMiddleware)
+  @httpPost('/:userUuid/requests', TYPES.AuthMiddleware, param("userUuid").custom(uuid => { return Validators.isUUID(uuid); }), TYPES.RequestValidator)
   async submitRequest(request: Request, response: Response): Promise<void> {
     await this.httpService.callAuthServer(request, response, `users/${request.params.userUuid}/requests`, request.body)
   }
